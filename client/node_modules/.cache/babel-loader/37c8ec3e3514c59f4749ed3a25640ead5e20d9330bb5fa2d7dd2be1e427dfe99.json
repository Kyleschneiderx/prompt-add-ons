{"ast":null,"code":"var _jsxFileName = \"/Users/kyleschneider/Documents/prompt-add-ons/client/src/Screen/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\n// import { GoogleSpreadsheet } from 'google-spreadsheet';\nimport { useParams } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\n// import { getRows } from '../google';\nimport gapi, { load } from 'gapi-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const credentials = require('../hidden-proxy-353912-23e166b8411d.json');\n  useEffect(() => {\n    console.log('Step 1');\n    // gapi.load('client', () => {\n    //   // Initialize the API client\n    //   gapi.client.init({\n    //     apiKey: \"AIzaSyBXV-JV8mbv2Wk918iLP5lljpca69S7akg\",\n    //     discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n    //   }).then(() => {\n    //     // Get the data from the sheet\n    //     gapi.client.sheets.spreadsheets.values.get({\n    //       spreadsheetId: '1th-TF427tlLuPsEUbnlhLdz2KeUcPNoHbKc6nJe4otc',\n    //       range: 'Sheet1!A1:C3',\n    //     }).then((response) => {\n    //       const data = response.result.values;\n    //       console.log(`Data: ${JSON.stringify(data)}`);\n    //     }, (error) => {\n    //       console.error(`Error getting data from sheet: ${JSON.stringify(error)}`);\n    //     });\n    //   }, (error) => {\n    //     console.error(`Error initializing API client: ${JSON.stringify(error)}`);\n    //   });\n    // });\n    // Load the Google API client with the Sheets API and authenticate with the service account\n    load('client:auth2', {\n      callback: () => {\n        gapi.client.init({\n          apiKey: 'AIzaSyBXV-JV8mbv2Wk918iLP5lljpca69S7akg',\n          clientId: credentials.client_id,\n          discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n          scope: 'https://www.googleapis.com/auth/spreadsheets'\n        }).then(() => {\n          gapi.auth2.getAuthInstance().signIn({\n            // Set up the authentication parameters for the service account\n            scope: 'https://www.googleapis.com/auth/spreadsheets',\n            'client_id': credentials.client_id,\n            'client_email': credentials.client_email,\n            'private_key': credentials.private_key\n          }).then(() => {\n            console.log('Authenticated with the service account.');\n          }).catch(err => {\n            console.error('Failed to authenticate with the service account:', err);\n          });\n        }).catch(err => {\n          console.error('Failed to load the Google API client:', err);\n        });\n      }\n    });\n  }, []);\n  const {\n    userId\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [\"Hello idiot\", userId]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wfFe02Jisnc4fCo9MbOPeNCekwU=\", false, function () {\n  return [useParams];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useParams","React","useState","useEffect","gapi","load","jsxDEV","_jsxDEV","App","_s","credentials","require","console","log","callback","client","init","apiKey","clientId","client_id","discoveryDocs","scope","then","auth2","getAuthInstance","signIn","client_email","private_key","catch","err","error","userId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kyleschneider/Documents/prompt-add-ons/client/src/Screen/App.js"],"sourcesContent":["import './App.css';\n// import { GoogleSpreadsheet } from 'google-spreadsheet';\nimport { useParams } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\n// import { getRows } from '../google';\nimport gapi, {load} from 'gapi-client';\n\nfunction App() {\n\n  const credentials = require('../hidden-proxy-353912-23e166b8411d.json');\n\n  useEffect(() => {\n    console.log('Step 1')\n    // gapi.load('client', () => {\n    //   // Initialize the API client\n    //   gapi.client.init({\n    //     apiKey: \"AIzaSyBXV-JV8mbv2Wk918iLP5lljpca69S7akg\",\n    //     discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n    //   }).then(() => {\n    //     // Get the data from the sheet\n    //     gapi.client.sheets.spreadsheets.values.get({\n    //       spreadsheetId: '1th-TF427tlLuPsEUbnlhLdz2KeUcPNoHbKc6nJe4otc',\n    //       range: 'Sheet1!A1:C3',\n    //     }).then((response) => {\n    //       const data = response.result.values;\n    //       console.log(`Data: ${JSON.stringify(data)}`);\n    //     }, (error) => {\n    //       console.error(`Error getting data from sheet: ${JSON.stringify(error)}`);\n    //     });\n    //   }, (error) => {\n    //     console.error(`Error initializing API client: ${JSON.stringify(error)}`);\n    //   });\n    // });\n    // Load the Google API client with the Sheets API and authenticate with the service account\n    load('client:auth2', {\n      callback: () => {\n        gapi.client.init({\n          apiKey: 'AIzaSyBXV-JV8mbv2Wk918iLP5lljpca69S7akg',\n          clientId: credentials.client_id,\n          discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n          scope: 'https://www.googleapis.com/auth/spreadsheets',\n        }).then(() => {\n          gapi.auth2.getAuthInstance().signIn({\n            // Set up the authentication parameters for the service account\n            scope: 'https://www.googleapis.com/auth/spreadsheets',\n            'client_id': credentials.client_id,\n            'client_email': credentials.client_email,\n            'private_key': credentials.private_key,\n          }).then(() => {\n            console.log('Authenticated with the service account.');\n          }).catch(err => {\n            console.error('Failed to authenticate with the service account:', err);\n          });\n        }).catch(err => {\n          console.error('Failed to load the Google API client:', err);\n        });\n      },\n    });\n  }, []);\n\n\n\n  \n\n  const { userId } = useParams();\n\n  \n  return (\n    <div className=\"App\">\n      Hello idiot\n      {userId}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB;AACA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AACA,OAAOC,IAAI,IAAGC,IAAI,QAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAMC,WAAW,GAAGC,OAAO,CAAC,0CAA0C,CAAC;EAEvER,SAAS,CAAC,MAAM;IACdS,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAR,IAAI,CAAC,cAAc,EAAE;MACnBS,QAAQ,EAAEA,CAAA,KAAM;QACdV,IAAI,CAACW,MAAM,CAACC,IAAI,CAAC;UACfC,MAAM,EAAE,yCAAyC;UACjDC,QAAQ,EAAER,WAAW,CAACS,SAAS;UAC/BC,aAAa,EAAE,CAAC,0DAA0D,CAAC;UAC3EC,KAAK,EAAE;QACT,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;UACZlB,IAAI,CAACmB,KAAK,CAACC,eAAe,EAAE,CAACC,MAAM,CAAC;YAClC;YACAJ,KAAK,EAAE,8CAA8C;YACrD,WAAW,EAAEX,WAAW,CAACS,SAAS;YAClC,cAAc,EAAET,WAAW,CAACgB,YAAY;YACxC,aAAa,EAAEhB,WAAW,CAACiB;UAC7B,CAAC,CAAC,CAACL,IAAI,CAAC,MAAM;YACZV,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;UACxD,CAAC,CAAC,CAACe,KAAK,CAACC,GAAG,IAAI;YACdjB,OAAO,CAACkB,KAAK,CAAC,kDAAkD,EAAED,GAAG,CAAC;UACxE,CAAC,CAAC;QACJ,CAAC,CAAC,CAACD,KAAK,CAACC,GAAG,IAAI;UACdjB,OAAO,CAACkB,KAAK,CAAC,uCAAuC,EAAED,GAAG,CAAC;QAC7D,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAMN,MAAM;IAAEE;EAAO,CAAC,GAAG/B,SAAS,EAAE;EAG9B,oBACEO,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,GAAC,aAEnB,EAACF,MAAM;EAAA;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV;AAAC5B,EAAA,CAlEQD,GAAG;EAAA,QAyDSR,SAAS;AAAA;AAAAsC,EAAA,GAzDrB9B,GAAG;AAoEZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}